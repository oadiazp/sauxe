<?php
/*
 *Componente para gestinar los sistemas.
 *
 * @package SIGIS
 * @copyright UCID-ERP Cuba
 * @author Oiner Gomez Baryolo    
 * @author Darien Garc�a Tejo
 * @author Julio Cesar Garc�a Mosquera  
 * @version 1.0-0
 */
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DatServidor extends BaseDatServidor 
{
	public function setUp()
  	{
	    parent::setUp();    
	    $this->hasMany('DatSistemaDatServidores',array('local'=>'idservidor','foreign'=>'idservidor'));
	    $this->hasOne('DatSerautenticacion',array('local'=>'idservidor','foreign'=>'idservidor')); 
	    $this->hasOne('DatServidorbd',array('local'=>'idservidor','foreign'=>'idservidor'));    
  	}

   	static public function cargarservidores($limit,$start) {
		$q = Doctrine_Query::create();
		if(($limit!=0))
			$result = $q->select('s.idservidor id, s.denominacion text, s.tiposervidor, s.descripcion, s.ip, a.tservidor, a.cadconexion')->from('DatServidor s, s.DatSerautenticacion a')->orderby('s.idservidor')->limit($limit)->offset($start)->execute();
		else 
			$result = $q->select('s.idservidor id, s.denominacion text')->from('DatServidor s')->where("s.tiposervidor=?",'bd')->orderby('s.idservidor')->execute();
		return $result;
	}
	
	static public function gettiposerv($idservidor) {
	            $q = Doctrine_Query::create();
	            $result = $q->select('s.tiposervidor')->from('DatServidor s')->where("s.idservidor=?",$idservidor)->execute();	            	
			    return $result;
	}
    
    public function cargarservidoresbdaut() {
	    $q = Doctrine_Query::create();
	    $result = $q->select('idservidor id,  denominacion text, descripcion, ip, tiposervidor, true leaf')->from('DatServidor')->orderby('idservidor')->execute();
	    return $result;	
	    }
    
	static public function obtenercantserv() {
	    $query = Doctrine_Query::create();
	    $cantFndes = $query->select('count(s.idservidor) cant')->from('DatServidor s')->execute();
	    return $cantFndes[0]->cant;
		} 
	
	static function cargarcomboservidoresaut()
	{
    $query = Doctrine_Query::create();
    $resul = $query->select('s.idservidor,s.denominacion')->from('DatServidor s,s.DatSerautenticacion a')->where("s.tiposervidor=?",'autenticaci&oacute;n')->execute();
    return $resul;
	}

    static public function cargarcomboservidoresBD() {
	    $query = Doctrine_Query::create();
	    return $query->select('idservidor, denominacion, ip')->from('DatServidor')->where("tiposervidor = 'bd'")->execute();
	    }
	    
    static public function comprobardatosservidor($denominacion) {
		$query = Doctrine_Query::create();
	    $cantidadserv = $query->from('DatServidor')->where("denominacion = ? ",$denominacion)->count();                      
	    return $cantidadserv;    
	}
	
	static function usuarioservidoraut($idsorvidor) {
	    $query=Doctrine_Query::create();
	    $resul=$query->select('s.idservidor,s.denominacion')->from('DatServidor s')->where("s.idservidor=?",$idsorvidor)->execute();
	    return $resul;
	}

    static function elimirarServidores($arrayServ) {
        $query=Doctrine_Query::create();
        $query->delete()->from('DatServidor')->whereIn("idservidor",$arrayServ)->execute();
    }
    
	static function getServerName($idsistema) {
        $query=Doctrine_Query::create();
        $datos = $query->select('s.denominacion text, s.idservidor id')->from('DatServidor s')->innerJoin('s.DatSistemaDatServidores ss')->where("ss.idsistema =?",$idsistema)->setHydrationMode(Doctrine :: HYDRATE_ARRAY)->execute();
        return $datos;
    }
}
